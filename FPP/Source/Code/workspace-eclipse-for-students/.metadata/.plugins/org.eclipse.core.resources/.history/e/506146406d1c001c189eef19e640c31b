package linkedlist;

import java.util.StringJoiner;

public class MyCharacterDoubleLinkedList {
	private Node head;
	private Node tail;
	private int size;

	void addFirst(Character c) {
		if(head==null && tail==null)
			head=tail=new Node(c, null, null);
		else {
			System.out.println(head.next+"_"+head.previous);
			Node newNode=new Node(c);
			newNode.next=head;
			newNode.previous=head.previous;
			if(head.next!=null)
				head.next.previous=newNode;
			System.out.println(newNode.next+"_"+newNode.previous);
			head=newNode;
		}
		size++;
	}

	boolean contains(Character c) {
		Node currNode=head;
		while(currNode!=null) {
			if(currNode.data.equals(c))
				return true;
			currNode=currNode.next;
		}
		return false;
	}

	public String toString() {
		StringJoiner sj=new StringJoiner(", ", "[", "]");
		Node currNode=head;
		while(currNode!=null) {
			sj.add(currNode.data.toString());
			currNode=currNode.next;
		}
		return sj.toString();
	}

	public void printAllInReverse() {
		StringJoiner sj=new StringJoiner(", ", "[", "]");
		Node currNode=tail;
		while(currNode!=null) {
			sj.add(currNode.data.toString());
			currNode=currNode.previous;
		}
		System.out.println(sj.toString()); 
	}
	private static class Node{
		private Character data;
		private Node next;
		private Node previous;

		Node(Character data){
			this.data=data;
			this.next=null;
			this.previous=null;
		}

		Node(Character data, Node next, Node previous){
			this.data=data;
			this.next=next;
			this.previous=previous;
		}
	}
}
