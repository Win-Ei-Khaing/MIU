package lesson7.examples_returning_boolean;

import java.util.Arrays;

public class BinarySearchTest{

	public static void main(String[] args) {
		var arr = new String[]{"Anna", "Bob", "Carlos", "Dave", "Erin", "Fred"};
		var target1 = "Dave";
		var target2 = "Alice";
		var result1 = binarySearchRecursively(arr, target1); // Expected result: true
		var result2 = binarySearchRecursively(arr, target2); // Expected result: false
		System.out.printf("The array, %s, contains target string, %s: %s\n", 
				Arrays.toString(arr), target1, result1);
		System.out.printf("The array, %s, contains target string, %s: %s\n", 
				Arrays.toString(arr), target2, result2);	
		var result3 = binarySearchIteratively(arr, target1); // Expected result: true
		var result4 = binarySearchIteratively(arr, target2); // Expected result: false
		System.out.printf("The array, %s, contains target string, %s: %s\n", 
				Arrays.toString(arr), target1, result3);
		System.out.printf("The array, %s, contains target string, %s: %s\n", 
				Arrays.toString(arr), target2, result4);	
	}
	
	public static boolean binarySearchRecursively(String[] arr, String target) {
		if(arr == null || arr.length < 1) return false;
		if(arr.length == 1) return arr[0].equals(target);
		int lo = 0;
		int up = arr.length - 1;
		return binarySearchRecursively(lo, up, arr, target);		
	}
	
	/**
	 * Here is the actual recursive private helper method
	 */
	private static boolean binarySearchRecursively(int lo, int up, String[] arr, String target) {
		if(lo > up) return false;
		int md = (lo + up) / 2;
		String strMd = arr[md];
		if(strMd.equals(target)) {
			return true;
		} else if(strMd.compareTo(target) > 0) { // implies target < strMd, then search left of mid
			//search left of mid
			return binarySearchRecursively(lo, md - 1, arr, target);
		} else { // implies target > strMd, then search right of mid
			//search right of mid
			return binarySearchRecursively(md + 1, up, arr, target);
		}
	}
	
	public static boolean binarySearchIteratively(String[] arr, String target) { // O(log n)
		if(arr == null || arr.length < 1) return false;
		if(arr.length == 1) return arr[0].equals(target);
		int lo = 0;
		int up = arr.length - 1;
		int md;
		while(lo <= up) {
			md = (lo + up) / 2;
			if(arr[md].compareTo(target) == 0) {
				return true;
			} else if(arr[md].compareTo(target) < 0) {
				// search right of mid
				lo = md + 1;
			} else {
				up = md - 1;
			}
		}
		return false;
	}
}
