package prog9_2_startup;


import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class SymbolBalancer {
	String ODD_DELIMITER = ""+(char)0;
	String filename;
	String text;
	char[] left;
	char[] right;
	public SymbolBalancer(String filename) {
		this.filename = filename;
		readFile();
	}
	public void setText(String text) {
		this.text = text;
	}

	boolean symbolsBalanced(String delimiters){
		//implemented by win
		MyCharStack stk=new MyCharStack();

		if(text== null || text.length() == 0) 
			return false;
		else {    
			for(int i = 0; i < text.length(); i++){	           
				switch(text.charAt(i)) {
				case '[':
				case '{':
				case '(':
					stk.push(text.charAt(i));
					break;
				case ']':
					if(!stk.isEmpty() && stk.peek()=='[')
						stk.pop();
					else return false;
					break;
				case '}':
					//System.out.println(stk.size()+"__"+stk.peek());
					if(!stk.isEmpty() && stk.peek()=='{') 
						stk.pop();
					else return false;
					break;
				case ')':
					if(!stk.isEmpty() && stk.peek()=='(') 
						stk.pop();
					else return false;
					break;
				}
			}
			// if stack is empty finally , it means symbol is balance in expression
			if(stk.isEmpty()) {
				return true;
			} else {
				return false;
			}
		}

	}

	public static void main(String[] args) {
		SymbolBalancer sb = new SymbolBalancer("Test.java"); //will get true because one { is within comment
		System.out.println(sb.symbolsBalanced("[]{}()"));
	}
	void readFile() {
		try {
			Scanner sc = new Scanner(new File(filename));
			sc.useDelimiter(ODD_DELIMITER);
			text = sc.next();
			System.out.println(text);
			sc.close();
		}
		catch(FileNotFoundException ex) {
			System.err.println("File Not Found Exception "+ex.getMessage());
		}
	}

}



